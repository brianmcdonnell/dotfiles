# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi


BLACK="\[\033[0;30m\]"
GRAY="\[\033[1;30m\]"

RED="\[\033[0;31m\]"
RED_BOLD="\[\033[1;31m\]"

GREEN="\[\033[0;32m\]"
GREEN_BOLD="\[\033[1;32m\]"

ORANGE="\[\033[0;33m\]"
YELLOW="\[\033[1;33m\]"

BLUE="\[\033[0;34m\]"
BLUE_BOLD="\[\033[1;34m\]"

PINK="\[\033[0;35m\]"
PINK_BOLD="\[\033[1;35m\]"

CYAN="\[\033[0;36m\]"
CYAN_BOLD="\[\033[1;36m\]"

WHITE="\[\033[0;37m\]"
WHITE_BOLD="\[\033[1;37m\]"

CLR="\[\033[00m\]"

# Shows * or + after prompt if git has modifications.
GIT_PS1_SHOWDIRTYSTATE=true

function hg_ps1() {
    # Displays mercurial branch, bookmark and status.
    local use_color=$1

    # The hg prompt format string is interpreted by python code. I could not get it to render colors correctly
    # when the colours were wrapped in the no-length indicated escape sequence: "\[COLOR_CODE_HERE\]".
    local PY_GREEN=$'\033[0;32m'
    local PY_GREEN_BOLD=$'\033[1;32m'
    local PY_ORANGE=$'\033[0;33m'
    local PY_YELLOW=$'\033[1;33m'
    local PY_BLUE=$'\033[0;34m'
    local PY_BLUE_BOLD=$'\033[1;34m'
    local PY_PINK=$'\033[0;35m'
    local PY_PINK_BOLD=$'\033[1;35m'
    local PY_CLR=$'\033[00m'

    if [ "$use_color" = yes ]; then
        hg prompt "{${PY_ORANGE}hg:{branch}}{|{bookmark}}{${PY_YELLOW} {status}}" 2> /dev/null
    else
        hg prompt "{hg1:{branch}}{|{bookmark}}{ {status}}" 2> /dev/null
    fi
}

function git_ps1() {
    # Displays git branch and status.
    if [ "$color_prompt" = yes ]; then
        echo -n "${ORANGE}"'$(__git_ps1 "git:%s")'"${CLR}"
    else
        echo -n '$(__git_ps1 "git:%s")'
    fi
}

function vir_env() {
    # Displays the current virtual python environment.
    if [ "$color_prompt" = yes ]; then
        echo -n "${PINK}${VIRTUAL_ENV:+ (`basename $VIRTUAL_ENV`)}${CLR}"
    else
        echo -n "${VIRTUAL_ENV:+ (`basename $VIRTUAL_ENV`)}"
    fi
}

function prompt_command() {
    # Function to render the prompt each time it's outputted in the terminal.
    if [ "$color_prompt" = yes ]; then
        PS1="\n${GREEN}${debian_chroot:+($debian_chroot)}${CYAN}\u@\h ${WHITE}\w$(vir_env) $(git_ps1)"'$(hg_ps1 "yes")'"\n${CLR}$ "
    else
        PS1="\n${debian_chroot:+($debian_chroot)}\u@\h \w$(vir_env) $(git_ps1)"'$(hg_ps1)'"\n$ "
    fi
}
PROMPT_COMMAND=prompt_command

# Don't unset color_prompt as it's needed every time prompt_command is executed.
#unset color_prompt force_color_prompt
unset force_color_prompt



